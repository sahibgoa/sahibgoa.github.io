// Generated by CoffeeScript 1.10.0
var Command, EmptyRegion, Modify, Move, NewBlock, Parser, Run, What, Where, colors,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

colors = [/blue/, /pink/, /chartreuse/];

What = (function() {
  What.prototype.color = null;

  function What(name) {
    this.name = name;
  }

  What.prototype.decide = function(line) {
    var color, i, len, res;
    if (/add/.test(line)) {
      res = new NewBlock;
    }
    for (i = 0, len = colors.length; i < len; i++) {
      color = colors[i];
      if (color.test(line)) {
        res.color = color.toString().replace(/\//g, "");
      }
    }
    return res;
  };

  return What;

})();

NewBlock = (function(superClass) {
  extend(NewBlock, superClass);

  function NewBlock() {
    NewBlock.__super__.constructor.call(this, "New Block");
  }

  return NewBlock;

})(What);

Where = (function() {
  function Where() {}

  return Where;

})();

EmptyRegion = (function(superClass) {
  extend(EmptyRegion, superClass);

  function EmptyRegion() {
    return EmptyRegion.__super__.constructor.apply(this, arguments);
  }

  return EmptyRegion;

})(Where);

Command = (function() {
  function Command(name) {
    this.name = name;
  }

  Command.prototype.decideArguments = function(line) {
    return line;
  };

  return Command;

})();

Move = (function(superClass) {
  extend(Move, superClass);

  Move.prototype.what = new What;

  Move.prototype.where = new Where;

  function Move() {
    Move.__super__.constructor.call(this, "Move");
  }

  Move.prototype.decideArguments = function(line) {
    return this.what = this.what.decide(line);
  };

  return Move;

})(Command);

Run = (function(superClass) {
  extend(Run, superClass);

  function Run() {
    Run.__super__.constructor.call(this, "Run");
  }

  return Run;

})(Command);

Modify = (function(superClass) {
  extend(Modify, superClass);

  function Modify() {
    Modify.__super__.constructor.call(this, "Modify");
  }

  return Modify;

})(Command);

Parser = (function() {
  function Parser() {}

  Parser.prototype.decideCommand = function(line) {
    if (/run/.test(line)) {
      return new Run;
    }
    if (/add/.test(line)) {
      return new Move;
    }
  };

  Parser.prototype.parse = function(line) {
    var command;
    command = this.decideCommand(line);
    if (command) {
      command.decideArguments(line);
    } else {
      throw new Error("No command found in: " + line);
    }
    return command;
  };

  return Parser;

})();
